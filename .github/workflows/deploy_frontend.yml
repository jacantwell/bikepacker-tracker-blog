name: Build, Push, and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - '.github/**'

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest

    env:
      REGIONAL_STACK_NAME: 'bikepacker-tracker-frontend-regional'
      GLOBAL_STACK_NAME: 'bikepacker-tracker-frontend-global'
      AWS_ACCOUNT_ID: '992382417038'

    outputs:
      bucket_name: ${{ steps.regional-output.outputs.bucket_name }}
      bucket_domain_name: ${{ steps.regional-output.outputs.bucket_domain_name }}
      distribution_id: ${{ steps.global-output.outputs.distribution_id }}
      distribution_arn: ${{ steps.global-output.outputs.distribution_arn }}
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Deploy Regional Stack (eu-west-2)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      
      - name: Deploy Initial S3 Bucket (without policy)
        run: |
          aws cloudformation deploy \
            --template-file frontend/template-regional.yaml \
            --stack-name $REGIONAL_STACK_NAME \
            --parameter-overrides \
              DomainName=${{ secrets.DOMAIN_NAME }} \
              CloudFrontDistributionArn='' \
            --capabilities CAPABILITY_IAM
      
      - name: Get Regional Stack Outputs
        id: regional-output
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name $REGIONAL_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='BucketName'].OutputValue" --output text)
          BUCKET_DOMAIN_NAME=$(aws cloudformation describe-stacks --stack-name $REGIONAL_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='BucketRegionalDomainName'].OutputValue" --output text)
          echo "bucket_name=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "bucket_domain_name=$BUCKET_DOMAIN_NAME" >> $GITHUB_OUTPUT
          # For debugging
          echo "Bucket name: $BUCKET_NAME"
          echo "Bucket domain: $BUCKET_DOMAIN_NAME"
      
      - name: Deploy Global Stack (us-east-1)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Deploy CloudFront and Related Resources
        run: |
          aws cloudformation deploy \
            --template-file frontend/template-global.yaml \
            --stack-name $GLOBAL_STACK_NAME \
            --parameter-overrides \
              DomainName=${{ secrets.DOMAIN_NAME }} \
              HostedZoneId=${{ secrets.HOSTED_ZONE_ID }} \
              BucketDomainName="${{ steps.regional-output.outputs.bucket_domain_name }}" \
            --capabilities CAPABILITY_IAM
      
      - name: Get Global Stack Outputs
        id: global-output
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name $GLOBAL_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='DistributionId'].OutputValue" --output text)
          DISTRIBUTION_ARN=$(aws cloudformation describe-stacks --stack-name $GLOBAL_STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='DistributionArn'].OutputValue" --output text)
          echo "distribution_id=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          echo "distribution_arn=$DISTRIBUTION_ARN" >> $GITHUB_OUTPUT
          # For debugging
          echo "Distribution ID: $DISTRIBUTION_ID"
          echo "Distribution ARN: $DISTRIBUTION_ARN"
      
      - name: Update Regional Stack with CloudFront ARN (eu-west-2)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
      
      - name: Update S3 Bucket Policy
        run: |
          aws cloudformation deploy \
            --template-file frontend/template-regional.yaml \
            --stack-name $REGIONAL_STACK_NAME \
            --parameter-overrides \
              DomainName=${{ secrets.DOMAIN_NAME }} \
              CloudFrontDistributionArn=${{ steps.global-output.outputs.distribution_arn }} \
            --capabilities CAPABILITY_IAM

  build-and-deploy:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm install
        
      - name: Build
        run: npm run build
      
      - name: Print job inputs
        run: |
          echo "Received bucket name: ${{ needs.deploy-infrastructure.outputs.bucket_name }}"
          echo "Received distribution ID: ${{ needs.deploy-infrastructure.outputs.distribution_id }}"
        
      - name: Configure AWS credentials (eu-west-2)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2
          
      - name: Deploy to S3
        run: |
          # Use domain name directly if bucket_name is empty
          if [ -z "${{ needs.deploy-infrastructure.outputs.bucket_name }}" ]; then
            echo "Warning: bucket_name is empty, using domain name directly"
            aws s3 sync dist/ s3://${{ secrets.DOMAIN_NAME }} --delete
          else
            echo "Using bucket name from output: ${{ needs.deploy-infrastructure.outputs.bucket_name }}"
            aws s3 sync dist/ s3://${{ needs.deploy-infrastructure.outputs.bucket_name }} --delete
          fi
        
      - name: Configure AWS credentials (us-east-1)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Invalidate CloudFront cache
        run: |
          # Only run if distribution ID is not empty
          if [ -z "${{ needs.deploy-infrastructure.outputs.distribution_id }}" ]; then
            echo "Warning: distribution_id is empty, skipping cache invalidation"
          else
            echo "Using distribution ID: ${{ needs.deploy-infrastructure.outputs.distribution_id }}"
            aws cloudfront create-invalidation --distribution-id ${{ needs.deploy-infrastructure.outputs.distribution_id }} --paths "/*"
          fi